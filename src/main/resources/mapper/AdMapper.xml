<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="com.jamie.home.api.dao.AdDao">
    <sql id="List">
        <if test="member != null">
            AND MEMBER = #{member}
        </if>
        <if test="state != null">
            AND STATE = #{state}
        </if>
        <if test="type != null">
            AND TYPE = #{type}
        </if>
        <if test="category != null">
            AND CATEGORY = #{category}
        </if>
        <if test="like">
            AND AD IN (SELECT AD FROM BM_AD_LIKE WHERE MEMBER = #{user_member})
        </if>
        <if test="showYn">
            AND (STATE IN (3,4) OR (STATE = 2 AND !IS_NOT_OVER_DAY_PRICE(AD)))
        </if>
        <if test="searchKeyword != null">
            <if test="searchType == 'ad'.toString()">
                AND AD LIKE CONCAT('%',#{searchKeyword},'%')
            </if>
            <if test="searchType == 'name'.toString()">
                AND (
                    MEMBER IN (SELECT MEMBER FROM BM_MEMBER WHERE NAME LIKE CONCAT('%',#{searchKeyword},'%'))
                    OR
                    MEMBER IN (SELECT MEMBER FROM BM_MEMBER WHERE COMPANY LIKE CONCAT('%',#{searchKeyword},'%'))
                )
            </if>
            <if test="searchType == null">
                AND (
                    MATCH(TITLE) AGAINST (CONCAT(#{searchKeyword},'*') IN BOOLEAN MODE)
                    OR MATCH(BRAND) AGAINST (CONCAT(#{searchKeyword},'*') IN BOOLEAN MODE)
                )
            </if>
        </if>
        <if test="searchKeyword == null">
            <if test="searchType != null">
                AND IS_NOT_OVER_DAY_PRICE(AD)
                <choose>
                    <when test="searchType == 'special'.toString()">
                        AND DISCOUNT != 0
                    </when>
                    <when test="searchType == 'random'.toString()"></when>
                    <when test="searchType == 'new'.toString()"></when>
                    <when test="searchType == 'match_keyword_list'.toString()">
                        AND COUNT_MATCH_KEYWORD_BM_AD(AD, #{user_member}) != 0
                    </when>
                    <when test="searchType == 'discount_list'.toString()">
                        AND DISCOUNT != 0
                    </when>
                </choose>
            </if>
        </if>
    </sql>
    <sql id="ListOrder">
        ORDER BY
        <if test="orderType != null">
            <choose>
                <when test="orderType == 'discount_desc'.toString()">DISCOUNT DESC, CLICK_PRICE DESC, </when>
                <when test="orderType == 'hits_desc'.toString()">(SELECT COUNT(*) FROM BM_AD_HITS WHERE AD = BM_AD.AD) DESC, </when>
                <when test="orderType == 'match_keyword_desc'.toString()">COUNT_MATCH_KEYWORD_BM_AD(AD, #{user_member}) DESC, </when>
                <when test="orderType == 'price_desc'.toString()">PRICE DESC, </when>
                <when test="orderType == 'price_asc'.toString()">PRICE ASC, </when>
                <when test="orderType == 'click_price_desc'.toString()">CLICK_PRICE DESC, </when>
                <when test="orderType == 'ctr_desc'.toString()">((SELECT COUNT(*) FROM BM_AD_HIT WHERE AD = BM_AD.AD)/(SELECT COUNT(*) FROM BM_AD_SHOW WHERE AD = BM_AD.AD)*100) DESC, </when>
                <when test="orderType == 'today_low_cost_asc'.toString()">CAL_TODAY_LEFT_PRICE(AD) ASC, </when>
            </choose>
        </if>
        <if test="searchKeyword == null">
            <if test="searchType != null">
                <choose>
                    <when test="searchType == 'special'.toString()">
                        RAND(), CLICK_PRICE DESC,
                    </when>
                    <when test="searchType == 'random'.toString()">
                        RAND(), CLICK_PRICE DESC,
                    </when>
                    <when test="searchType == 'new'.toString()">
                        REGDATE DESC,
                    </when>
                    <when test="searchType == 'match_keyword_list'.toString()">
                        COUNT_MATCH_KEYWORD_BM_AD(AD, #{user_member}) DESC, CLICK_PRICE DESC,
                    </when>
                    <when test="searchType == 'discount_list'.toString()">

                    </when>
                </choose>
            </if>
        </if>
        AD DESC
    </sql>
    <select id="getListAd" resultType="com.jamie.home.api.model.AD">
        SELECT *
        FROM BM_AD
        WHERE 1=1
        <include refid="List"></include>
        <include refid="ListOrder"></include>
        <if test="start != null">
            LIMIT #{start}, #{page_block}
        </if>
    </select>

    <select id="getListAdCnt" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM BM_AD
        WHERE 1=1
        <include refid="List"></include>
    </select>

    <select id="getAd" resultType="com.jamie.home.api.model.AD">
        SELECT *
        FROM BM_AD
        WHERE AD = #{ad}
    </select>

    <insert id="insertAd" parameterType="com.jamie.home.api.model.AD" useGeneratedKeys="true" keyProperty="ad">
        INSERT INTO BM_AD (
            MEMBER, TITLE, TYPE, CATEGORY, BRAND, NAME, PRICE, DISCOUNT, LINK, KEYWORDS, IMAGES, IMAGE_SUPPORT
        ) VALUES (
            #{member}, #{title}, #{type}, #{category}, #{brand}, #{name}, #{price}, #{discount}, #{link}, #{keywords}, #{images}, #{image_support}
        )
    </insert>

    <update id="updateAd">
        UPDATE BM_AD SET UPDDATE = now()
        <if test="title != null">,TITLE = #{title}</if>
        <if test="type != null">,TYPE = #{type}</if>
        <if test="category != null">,CATEGORY = #{category}</if>
        <if test="brand != null">,BRAND = #{brand}</if>
        <if test="name != null">,NAME = #{name}</if>
        <if test="price != null">,PRICE = #{price}</if>
        <if test="discount != null">,DISCOUNT = #{discount}</if>
        <if test="link != null">,LINK = #{link}</if>
        <if test="keywords != null">,KEYWORDS = #{keywords}</if>
        <if test="images != null">,IMAGES = #{images}</if>
        <if test="image_support != null">,IMAGE_SUPPORT = #{image_support}</if>
        <if test="click_price != null">,CLICK_PRICE = #{click_price}</if>
        <if test="day_price != null">,DAY_PRICE = #{day_price}</if>
        <if test="state != null">,STATE = #{state}</if>
        <if test="state_error != null">,STATE_ERROR = #{state_error}</if>
        WHERE AD = #{ad}
    </update>
    <delete id="deleteAd">
        DELETE FROM BM_AD WHERE AD = #{ad}
    </delete>
    <select id="getAdCommonKeyword" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT BACK.*, CK.NAME AS NAME, CK.CATEGORY AS CATEGORY
        FROM BM_AD_COMMON_KEYWORD BACK
            LEFT JOIN COMMON_KEYWORD CK ON CK.COMMON_KEYWORD = BACK.COMMON_KEYWORD
        WHERE AD = #{ad}
    </select>
    <insert id="insertAdCommonKeyword">
        INSERT INTO BM_AD_COMMON_KEYWORD (AD, COMMON_KEYWORD) VALUES
        <foreach collection="commonKeywordList" item="keyword" separator=",">
            (#{ad}, #{keyword.common_keyword})
        </foreach>
    </insert>
    <update id="updateAdCommonKeywordMandatory">
        UPDATE BM_AD_COMMON_KEYWORD SET MANDATORY = #{mandatory} WHERE AD_COMMON_KEYWORD = #{ad_common_keyword}
    </update>
    <delete id="deleteAdCommonKeyword">
        DELETE FROM BM_AD_COMMON_KEYWORD WHERE AD = #{ad} AND COMMON_KEYWORD = #{common_keyword}
    </delete>
    <select id="getAdKeyword" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT BAK.*, CK.NAME AS NAME
        FROM BM_AD_KEYWORD BAK
        LEFT JOIN CATEGORY_KEYWORD CK ON CK.KEYWORD = BAK.KEYWORD
        WHERE AD = #{ad}
    </select>
    <insert id="insertAdKeyword">
        INSERT INTO BM_AD_KEYWORD (AD, KEYWORD) VALUES
        <foreach collection="keywordList" item="keyword" separator=",">
            (#{ad}, #{keyword.keyword})
        </foreach>
    </insert>
    <update id="updateAdKeywordMandatory">
        UPDATE BM_AD_KEYWORD SET MANDATORY = #{mandatory} WHERE AD_KEYWORD = #{ad_keyword}
    </update>
    <delete id="deleteAdKeyword">
        DELETE FROM BM_AD_KEYWORD WHERE AD = #{ad} AND KEYWORD = #{keyword}
    </delete>
    <insert id="insertAdHit">
        INSERT INTO BM_AD_HIT (AD, MEMBER) VALUES (#{ad}, #{member})
    </insert>
    <select id="getAdLike" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM BM_AD_LIKE WHERE AD = #{ad} AND MEMBER = #{member}
    </select>
    <insert id="insertAdLike">
        INSERT INTO BM_AD_LIKE (AD, MEMBER) VALUES (#{ad}, #{member})
    </insert>
    <delete id="deleteAdLike">
        DELETE FROM BM_AD_LIKE WHERE AD = #{ad} AND MEMBER = #{member}
    </delete>

    <sql id="periodSql">
        <if test="filter_name != null">
            <choose>
                <when test="filter_name == 'today'.toString()">
                    AND REGDATE >= DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00')
                    AND DATE_FORMAT(NOW(), '%Y-%m-%d 23:59:59') >= REGDATE
                </when>
                <when test="filter_name == 'yesterday'.toString()">
                    AND REGDATE >= DATE_FORMAT(NOW() - interval 1 day, '%Y-%m-%d 00:00:00')
                    AND DATE_FORMAT(NOW() - interval 1 day, '%Y-%m-%d 23:59:59') >= REGDATE
                </when>
                <when test="filter_name == 'last7'.toString()">
                    AND REGDATE >= DATE_FORMAT(NOW() - interval 7 day, '%Y-%m-%d 00:00:00')
                    AND DATE_FORMAT(NOW(), '%Y-%m-%d 23:59:59') >= REGDATE
                </when>
                <when test="filter_name == 'last30'.toString()">
                    AND REGDATE >= DATE_FORMAT(NOW() - interval 1 month, '%Y-%m-%d 00:00:00')
                    AND DATE_FORMAT(NOW(), '%Y-%m-%d 23:59:59') >= REGDATE
                </when>
                <when test="filter_name == 'custom'.toString()">
                    AND REGDATE >= #{start_date} AND #{end_date} >= REGDATE
                </when>
            </choose>
        </if>
    </sql>

    <select id="getListAdShowCnt" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM BM_AD_SHOW
        WHERE AD = #{ad}
        <include refid="periodSql"></include>
    </select>

    <select id="getListClickMemberCnt" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM BM_AD_HIT WHERE AD = #{ad}
        <include refid="periodSql"></include>
    </select>

    <select id="getClickMemberKeyword" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT *
        FROM
        (
            SELECT NAME, COUNT(*) AS CNT, 1 AS TYPE
            FROM MEMBER_KEYWORD MK
                LEFT JOIN CATEGORY_KEYWORD CK on MK.KEYWORD = CK.KEYWORD
            WHERE MEMBER IN (SELECT DISTINCT MEMBER FROM BM_AD_HIT WHERE AD = #{ad})
            GROUP BY NAME

        UNION

            SELECT NAME, COUNT(*) AS CNT, 2 AS TYPE
            FROM MEMBER_COMMON_KEYWORD MCK
                LEFT JOIN COMMON_KEYWORD CK on MCK.COMMON_KEYWORD = CK.COMMON_KEYWORD
            WHERE MEMBER IN (SELECT DISTINCT MEMBER FROM BM_AD_HIT WHERE AD = #{ad})
            GROUP BY NAME
        ) AS G
        ORDER BY G.CNT DESC
        LIMIT 0,10
    </select>

    <update id="updateAdStateAll">
        UPDATE BM_AD SET UPDDATE = now(), STATE = 3, STATE_ERROR = '보유 포인트 부족' WHERE MEMBER = #{member} AND STATE NOT IN (0,1)
    </update>

    <select id="getAdListRandom" resultType="com.jamie.home.api.model.AD">
        SELECT * FROM BM_AD WHERE AD IN (
            SELECT AD
            FROM MEMBER_AD
            WHERE MEMBER = #{user_member}
                AND REGDATE >= DATE_FORMAT(NOW(), '%Y-%m-%d 00:00:00')
                AND DATE_FORMAT(NOW(), '%Y-%m-%d 23:59:59') >= REGDATE
        )
    </select>

    <insert id="insertMemberAdValid">
        CALL INSERT_MEMBER_AD_VALID(#{user_member});
    </insert>

    <insert id="insertAdShow">
        INSERT INTO BM_AD_SHOW (AD) VALUES (#{ad})
    </insert>

    <select id="getIsNotOverTodayPrice" resultType="java.lang.Boolean">
        SELECT IS_NOT_OVER_DAY_PRICE(AD) FROM BM_AD WHERE AD = #{ad}
    </select>

    <select id="getTodayLeftDayPrice" resultType="java.lang.Integer">
        SELECT CAL_TODAY_LEFT_PRICE(AD) FROM BM_AD WHERE AD = #{ad}
    </select>
</mapper>